{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prade\\\\Desktop\\\\react prank calculator\\\\my-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport { ButonArea } from \"./components/ButonArea\";\nimport { Display } from \"./components/Display\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst operators = [\"+\", \"-\", \"*\", \"/\", \"%\"];\n\nfunction App() {\n  _s();\n\n  const [str, setStr] = useState(\"\");\n  const [lastOperator, setLastOperator] = useState(\"\");\n  const [isPrank, setPrank] = useState(False);\n\n  const handleOnClick = value => {\n    //what we shoud do when we click on a specific button\n    if (value === \"AC\") {\n      setStr(\"\");\n      return;\n    }\n\n    if (value === \"=\") {\n      return onTotal();\n    }\n\n    if (value === \"C\") {\n      const temStr = str.slice(0, -1);\n      setStr(temStr);\n      return;\n    }\n\n    if (operators.includes(value)) {\n      setLastOperator(value);\n      const lastChar = str.slice(-1);\n\n      if (operators.includes(lastChar)) {\n        // replace the last operator with the new one\n        const strWithOutLastChar = str.slice(0, -1);\n        setStr(strWithOutLastChar + value);\n        return;\n      }\n    }\n\n    if (value === \".\") {\n      if (lastOperator) {\n        const positionOfLastOperator = str.lastIndexOf(lastOperator); // const beforeLastOperator = str.slice(0, positionOfLastOperator + 1);\n\n        const afterLastOperator = str.slice(positionOfLastOperator + 1);\n\n        if (afterLastOperator.includes(\".\")) {\n          return;\n        }\n      } else {\n        if (str.includes(\".\")) {\n          return;\n        }\n      }\n    }\n\n    setStr(str + value);\n  };\n\n  const onTotal = () => {\n    const prankval = randomNumber();\n    prankVal > 0 && setIsPrank(True);\n    const ttl = eval(str) + prankval;\n    setStr(ttl.toFixed(2).toString());\n  };\n\n  const randomNumber = () => {\n    const num = Math.ceil(Math.random() * 10);\n    return num > 0 ? 0 : num;\n\n    if (num === 0) {\n      setPrank(False);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(Display, {\n      str: str,\n      isPrank: isPrank\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButonArea, {\n      handleOnClick: handleOnClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"dlSYrhxruoyjKHOZ9CByX4KANo8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","ButonArea","Display","operators","App","str","setStr","lastOperator","setLastOperator","isPrank","setPrank","False","handleOnClick","value","onTotal","temStr","slice","includes","lastChar","strWithOutLastChar","positionOfLastOperator","lastIndexOf","afterLastOperator","prankval","randomNumber","prankVal","setIsPrank","True","ttl","eval","toFixed","toString","num","Math","ceil","random"],"sources":["C:/Users/prade/Desktop/react prank calculator/my-app/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport { ButonArea } from \"./components/ButonArea\";\nimport { Display } from \"./components/Display\";\n\nconst operators = [\"+\", \"-\", \"*\", \"/\", \"%\"];\n\nfunction App() {\n  const [str, setStr] = useState(\"\");\n  const [lastOperator, setLastOperator] = useState(\"\");\n  const [isPrank, setPrank] = useState(False);\n\n  const handleOnClick = (value) => {\n    //what we shoud do when we click on a specific button\n    if (value === \"AC\") {\n      setStr(\"\");\n      return;\n    }\n\n    if (value === \"=\") {\n      return onTotal();\n    }\n\n    if (value === \"C\") {\n      const temStr = str.slice(0, -1);\n      setStr(temStr);\n      return;\n    }\n\n    if (operators.includes(value)) {\n      setLastOperator(value);\n      const lastChar = str.slice(-1);\n      if (operators.includes(lastChar)) {\n        // replace the last operator with the new one\n\n        const strWithOutLastChar = str.slice(0, -1);\n        setStr(strWithOutLastChar + value);\n        return;\n      }\n    }\n\n    if (value === \".\") {\n      if (lastOperator) {\n        const positionOfLastOperator = str.lastIndexOf(lastOperator);\n        // const beforeLastOperator = str.slice(0, positionOfLastOperator + 1);\n        const afterLastOperator = str.slice(positionOfLastOperator + 1);\n        if (afterLastOperator.includes(\".\")) {\n          return;\n        }\n      } else {\n        if (str.includes(\".\")) {\n          return;\n        }\n      }\n    }\n\n    setStr(str + value);\n  };\n\n  const onTotal = () => {\n    const prankval = randomNumber();\n    prankVal > 0 && setIsPrank(True);\n    const ttl = eval(str) + prankval;\n    setStr(ttl.toFixed(2).toString());\n  };\n  const randomNumber = () => {\n    const num = Math.ceil(Math.random() * 10);\n    return num > 0 ? 0 : num;\n    if (num === 0) {\n      setPrank(False);\n    }\n  };\n  return (\n    <div className=\"wrapper\">\n      <Display str={str} isPrank={isPrank} />\n      {/* <!-- correct way is to give different div to input and all the buttons --> */}\n\n      <ButonArea handleOnClick={handleOnClick} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}